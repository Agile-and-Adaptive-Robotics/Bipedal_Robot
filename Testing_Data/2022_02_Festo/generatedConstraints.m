function [cineq, ceq, cineqGrad, ceqGrad] = generatedConstraints(inputVariables, extraParams)
%generatedConstraints Compute constraint values
%
%   This function computes the constraint values.
%   Update the generated code to add the constraints gradient computation.
%
%   [CINEQ, CEQ] = generatedConstraints(INPUTVARIABLES, EXTRAPARAMS)
%   computes the inequality constraint values CINEQ and the equality
%   constraint values CEQ at the point INPUTVARIABLES, using the extra
%   parameters in EXTRAPARAMS.
%
%   [CINEQ, CEQ, CINEQGRAD, CEQGRAD] =
%   generatedConstraints(INPUTVARIABLES, EXTRAPARAMS) additionally
%   computes the inequality constraint gradient values CINEQGRAD and the
%   equality constraint gradient values CEQGRAD at the current point.
%
%   Auto-generated by prob2struct on 08-May-2024 02:45:29

%% Variable indices.
kBidx = 1;
kTidx = 2;
x1idx = 3;

%% Map solver-based variables to problem-based.
kB = inputVariables(kBidx);
kT = inputVariables(kTidx);
x1 = inputVariables(x1idx);


%% Insert gradient calculation here.
% To call the gradient code, notify the solver by setting the
% SpecifyConstraintGradient option to true.
if nargout > 2
    if nargout > 2
        cineqGrad = [];
        ceqGrad = [];
    end
    
end

%% Compute inequality constraints.
cineq = zeros(2, 1);
ceq = [];
[arg2,~] = generatedFunction_minimizeFlx1_withReuse(x1, kT, kB);
lhsconstr = arg2(2);
rhsconstr = extraParams{1};

cineq(1) = lhsconstr - rhsconstr;
[~,arg2] = generatedFunction_minimizeFlx1_withReuse(x1, kT, kB);
lhsconstr = arg2(2);
rhsconstr = extraParams{2};

cineq(2) = lhsconstr - rhsconstr;

%% Compute equality constraints.
cineq = zeros(2, 1);
ceq = [];
[arg2,~] = generatedFunction_minimizeFlx1_withReuse(x1, kT, kB);
lhsconstr = arg2(2);
rhsconstr = extraParams{1};

cineq(1) = lhsconstr - rhsconstr;
[~,arg2] = generatedFunction_minimizeFlx1_withReuse(x1, kT, kB);
lhsconstr = arg2(2);
rhsconstr = extraParams{2};

cineq(2) = lhsconstr - rhsconstr;

end